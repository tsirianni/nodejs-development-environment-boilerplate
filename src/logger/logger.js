'use strict';

const { LEVELS, LEVEL_TO_COLOR, MESSAGE_COLOR } = require('./enums');
const { Console } = require('node:console');
const os = require('node:os');
const fs = require('fs');

class Logger {
  /**
   * Creates an instance of Logger.
   * @param {string} [output='console'] - The output option for logging. Valid options are 'console' and 'file'. If none is provided it defauts to console.
   * @throws {Error} - Throws an error if the output option is invalid.
   *
   * The logs generated by each method will include additional metadata such as date, process ID, and hostname.
   *
   * Note: The methods `log` and `error` are inherited from the `Console` class because they are already linked to `process.stdin` and `process.stdout`. Other methods may be inherited from Console if needed by adding them to the desiredMethods array.
   */
  constructor(output = 'console') {
    this.output = output;

    const validOutputs = ['console', 'file'];

    if (output && !validOutputs.includes(output)) {
      throw new Error('invalid output option');
    }

    // Define an array of desired methods to inherit from console
    const desiredMethods = ['log', 'error'];

    Object.getOwnPropertyNames(Console.prototype).forEach((methodName) => {
      if (desiredMethods.includes(methodName)) {
        this[methodName] = console[methodName].bind(Logger);
      }
    });
  }

  /**
   * Retrieves the metadata information for logging.
   * @returns {Object} - Metadata object containing the current date, process ID, and hostname.
   */
  #getMetadata() {
    return {
      date: new Date().toISOString(),
      pid: process.pid,
      host: os.hostname(),
    };
  }

  /**
   * Formats the metadata and level information for logging.
   * @param {Object} metadata - The metadata object.
   * @param {string} level - The log level.
   * @param {boolean} [debug=false] - Specifies whether the log is in debug mode.
   * @param {string} [output=this.output] - The output option for logging (retrieved from the constructor).
   * @returns {string} - The formatted log message prefix.
   */
  #printf(metadata, level, debug = false, output = this.output) {
    const { date, pid, host } = metadata;
    const messageLevel = LEVELS[level];
    const levelColor = LEVEL_TO_COLOR[messageLevel];

    if (output === 'file') {
      return `[${date}][${pid}][at ${host}][${level}]:`;
    } else {
      return debug
        ? `[${date}]${levelColor}[${level}]:`
        : `[${date}][${pid}][at ${host}]${levelColor}[${level}]${MESSAGE_COLOR}:`;
    }
  }

  /**
   * Handles the error event by logging an error message. Only used when logging on files.
   * @param {Error} error - The error object.
   */
  #errorEventHandler(error) {
    this.logError('An error occurred when writing your log to the specified file:', error);
  }

  /**
   * Writes the log message to a file.
   * @param {string} formattedMetadata - The formatted log message prefix with metadata.
   * @param {string} message - The log message.
   * @param {string} [path=null] - The path of the log file.
   * @param {Object|null} [details=null] - Additional details to include in the log message.
   */

  logToFile(formattedMetadata, message, path, details = null) {
    if (!path) {
      throw new Error('A path must be specified to log to files');
    }

    const logMessage = details
      ? `${formattedMetadata} ${message} \n Details: ${JSON.stringify(details, null, 2)}`
      : `${formattedMetadata} ${message}`;

    const logStream = fs.createWriteStream(path, { flags: 'a' });

    logStream.on('error', this.#errorEventHandler);

    logStream.on('finish', () => {
      this.log(`${LEVEL_TO_COLOR[LEVELS.info]} Your log has been successfully written to the specified file`);
    });

    logStream.write(`${logMessage} \n\n`);
    logStream.close();
  }

  /**
   * Logs an informational message to the console (stdout) or a file.
   * @param {string} message - The log message.
   * @param {Object|null} [details=null] - Additional details to include in the log message.
   * @param {string|null} [path=null] - The path of the log file.
   */
  logInfo(message, details = null, path = null) {
    const metadata = this.#getMetadata();
    const formattedMetadata = this.#printf(metadata, 'info');

    const shouldLogToFile = this.output === 'file';

    if (shouldLogToFile) {
      this.logToFile(formattedMetadata, message, path, details);
    } else {
      return details
        ? this.log(formattedMetadata, message, '\n Details:', JSON.stringify(details, null, 2))
        : this.log(formattedMetadata, message);
    }
  }

  /**
   * Logs an error message to the console (stderr) or a file.
   * @param {string} message - The log message.
   * @param {Error|null} [error=null] - The error object.
   * @param {string|null} [path=null] - The path of the log file.
   */
  logError(message, error = null, path = null) {
    const metadata = this.#getMetadata();
    const formattedMetadata = this.#printf(metadata, 'error');

    const shouldLogToFile = this.output === 'file';

    if (shouldLogToFile) {
      this.logToFile(formattedMetadata, message, path, error);
    } else {
      return error ? this.error(formattedMetadata, message, '\n', error) : this.error(formattedMetadata, message);
    }
  }

  /**
   * Logs a warning message to the console (stdout) or a file.
   * @param {string} message - The log message.
   * @param {Object|null} [details=null] - Additional details to include in the log message.
   * @param {string|null} [path=null] - The path of the log file.
   */
  logWarn(message, details = null, path = null) {
    const metadata = this.#getMetadata();
    const formattedMetadata = this.#printf(metadata, 'warn');

    const shouldLogToFile = this.output === 'file';

    if (shouldLogToFile) {
      this.logToFile(formattedMetadata, message, path, details);
    } else {
      return details
        ? this.log(formattedMetadata, message, '\n Details:', JSON.stringify(details, null, 2))
        : this.log(formattedMetadata, message);
    }
  }

  /**
   * Logs a debug message to the console or a file. The whole message and details are printed in green to facilitate location within text.
   * @param {string} message - The log message.
   * @param {Object|null} [details=null] - Additional details to include in the log message.
   * @param {string|null} [path=null] - The path of the log file.
   */
  logDebug(message, details = null, path = null) {
    const metadata = this.#getMetadata();
    const formattedMetadata = this.#printf(metadata, 'debug', true);

    const shouldLogToFile = this.output === 'file';

    if (shouldLogToFile) {
      this.logToFile(formattedMetadata, message, path, details);
    } else {
      return details
        ? this.log(formattedMetadata, message, '\n Details:', JSON.stringify(details, null, 2))
        : this.log(formattedMetadata, message);
    }
  }
}

module.exports = Logger;
